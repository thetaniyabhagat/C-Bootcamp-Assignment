Assignment - 15 A Job Ready Bootcamp in C++, DSA and IOT MySirG

Array and Functions in C Language

1. Write a function to find the greatest number from the given array of any size. (TSRS)
Ans.  #include <stdio.h>
 
// C function to find maximum in arr[] of size n
int largest(int arr[], int n)
{
    int i;
    
    // Initialize maximum element
    int max = arr[0];
 
    // Traverse array elements from second and
    // compare every element with current max 
    for (i = 1; i < n; i++)
        if (arr[i] > max)
            max = arr[i];
 
    return max;
}
 
int main()
{
    int arr[] = {10, 324, 45, 90, 9808};
    int n = sizeof(arr)/sizeof(arr[0]);
    printf("Largest in given array is %d", largest(arr, n));
    return 0;
}

Output
Largest in given array is 9808

2. Write a function to find the smallest number from the given array of any size. (TSRS)
Ans.    #include<stdio.h>
#include<conio.h>
int findSmallest(int [], int);
int main()
{
    int arr[50], small, i, size;
    printf("Enter Array Size: ");
    scanf("%d", &size);
    printf("Enter %d Array Elements: ", size);
    for(i=0; i<size; i++)
        scanf("%d", &arr[i]);
    small=findSmallest(arr, size);
    printf("\nSmallest Number = %d", small);
    getch();
    return 0;
}
int findSmallest(int arr[], int n)
{
    int i=0, small;
    small=arr[i];
    while(i<n)
    {
        if(small>arr[i])
            small = arr[i];
        i++;
    }
    return small;
}
3. Write a function to sort an array of any size. (TSRS)
Ans.  #include <stdio.h>
 
void swap(int* xp, int* yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
 
// Function to perform Selection Sort
void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
 
    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
 
        // Find the minimum element in unsorted array
        min_idx = i;
        for (j = i + 1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
 
        // Swap the found minimum element
        // with the first element
        swap(&arr[min_idx], &arr[i]);
    }
}
 
// Function to print an array
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
// Driver code
int main()
{
    int arr[] = { 0, 23, 14, 12, 9 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Original array: \n");
    printArray(arr, n);
 
    selectionSort(arr, n);
    printf("\nSorted array in Ascending order: \n");
    printArray(arr, n);
 
    return 0;
}
Output: 
Original array: 
0 23 14 12 9 

Sorted array in Ascending order: 
0 9 12 14 23
4. Write a function to rotate an array by n position in d direction. The d is an indicative
value for left or right. 
Ans.  #include <stdio.h>  
   
int main()  
{  
    //Initialize array   
    int arr[] = {1, 2, 3, 4, 5};   
    //Calculate length of array arr  
    int length = sizeof(arr)/sizeof(arr[0]);  
    //n determine the number of times an array should be rotated  
    int n = 3;  
      
    //Displays original array  
    printf("Original array: \n");  
    for (int i = 0; i < length; i++) {   
        printf("%d ", arr[i]);   
    }    
      
    //Rotate the given array by n times toward left  
    for(int i = 0; i < n; i++){  
        int j, first;  
        //Stores the first element of the array  
        first = arr[0];  
      
        for(j = 0; j < length-1; j++){  
            //Shift element of array by one  
            arr[j] = arr[j+1];  
        }  
        //First element of array will be added to the end  
        arr[j] = first;  
    }  
      
    printf("\n");  
      
    //Displays resulting array after rotation  
    printf("Array after left rotation: \n");  
    for(int i = 0; i < length; i++){  
        printf("%d ", arr[i]);  
    }  
    return 0;  
}  
Output:
Original array: 
1 2 3 4 5 
Array after left rotation: 
4 5 1 2 3 

5. Write a function to find the first occurrence of adjacent duplicate values in the array.
Function has to return the value of the element.
6. Write a function in C to read n number of values in an array and display it in reverse
order.
Ans.  #include <stdio.h>

void main()
{
   int i,n,a[100];
   
       printf("\n\nRead n number of values in an array and display it in reverse order:\n");
       printf("------------------------------------------------------------------------\n");
   
   printf("Input the number of elements to store in the array :");
   scanf("%d",&n);
   
   printf("Input %d number of elements in the array :\n",n);
   for(i=0;i<n;i++)
      {
	  printf("element - %d : ",i);
	  scanf("%d",&a[i]);
	  }
      
   printf("\nThe values store into the array are : \n");
   for(i=0;i<n;i++)
     {
	   printf("% 5d",a[i]);
	 }
 
   printf("\n\nThe values store into the array in reverse are :\n");
   for(i=n-1;i>=0;i--)
      {
	   printf("% 5d",a[i]);
	  }
   printf("\n\n");
} 

Sample Output:

Read n number of values in an array and display it in reverse order:                                          
------------------------------------------------------------------------                                      
Input the number of elements to store in the array :3                                                         
Input 3 number of elements in the array :                                                                     
element - 0 : 2                                                                                               
element - 1 : 5                                                                                               
element - 2 : 7                                                                                               
                                                                                                              
The values store into the array are :                                                                         
    2    5    7                                                                                               
                                                                                                              
The values store into the array in reverse are :                                                              
    7    5    2
7. Write a function in C to count a total number of duplicate elements in an array.
Ans.   #include <stdio.h>

int Total_Duplicates(int arr[], int Size);
 
int main()
{
	int arr[10], i, Size, Count = 0;
	
	printf("\n Please Enter Number of elements in an array  :   ");
	scanf("%d", &Size);
	
	printf("\n Please Enter %d elements of an Array  :  ", Size);
	for (i = 0; i < Size; i++)
	{
    	scanf("%d", &arr[i]);
   	}     
 
	Count = Total_Duplicates(arr, Size);

 	printf("\n Total Number of Duplicate Elements in this Array  =  %d ", Count);
	     
 	return 0;
}
int Total_Duplicates(int arr[], int Size)
{
	int i, j, Count = 0;
	
	for (i = 0; i < Size; i++)
	{
		for(j = i + 1; j < Size; j++)
		{
    		if(arr[i] == arr[j])
    		{
    			Count++;
				break;
			}
		}
	}
	return Count;	
}
OUTPUT:
Please Enter Number of elements in an array  :   10
Please Enter 10 elements of an Array  :  1 2 3 4 1 2 5 6 5 9
Total Number of Duplicate Elements in this Array  =  3

8. Write a function in C to print all unique elements in an array.
Ans.  #include <stdio.h>

count(int *a,int *b,int n)
{ 
    int i,c,j;
    for(i=0; i<n; i++)
    {
        c=1;
        if(a[i]!=-1)
		{
		    for(j=i+1; j<n; j++)
     
            {
        	   if(a[i]==a[j])
        	    {
			       c++;
			       a[j]=-1;
		       }
	       }
	       b[i]=c;
		}
         
   
          
    }
     
 }
 
 print(int *a,int *b,int n)
 { 
    int i;
    
	printf("unique numbers in the  array :\n");

    for(i=0; i<n; i++)
    {
         
        if(a[i]!=-1)
        {
        	if(b[i]==1)
        	{
			
        	printf("%d \n",a[i]);

		    }   
		}
		 
         
    }
 	
 }
int main()
{
    int a[10000],b[10000],i,n;
   
    printf("Enter size of the array : ");
    scanf("%d", &n);
 
    printf("Enter elements in array : ");
    for(i=0; i<n; i++)
    {
        scanf("%d",&a[i]);
    }
    
    count(a,b,n);
    
	print(a,b,n);   
    
	return 0;
}
Output:
Enter size of the array: 5
Enter elements in array: 1
2
3
3
5
unique numbers in the array :
1
2
5

9. Write a function in C to merge two arrays of the same size sorted in descending
order.
Ans.  #include <stdio.h>

int main()
{
    
    int n1,n2,n3;            //Array Size Declaration
    printf("\nEnter the size of first array ");
    scanf("%d",&n1);
    printf("\nEnter the size of second array ");
    scanf("%d",&n2);
    
    n3=n1+n2;
    printf("\nEnter the sorted array elements");
    int a[n1],b[n2],c[n3];     //Array Declaration
    for(int i=0;i<n1;i++)      //Array Initialized
    {
       scanf("%d",&a[i]);
       c[i]=a[i];
    }
    int k=n1;
    printf("\nEnter the sorted array elements");
    for(int i=0;i<n2;i++)      //Array Initialized
    {
        scanf("%d",&b[i]);
        c[k]=b[i];
        k++;
    }
    printf("\nThe merged array..\n");
    for(int i=0;i<n3;i++)
    printf("%d ",c[i]);        //Print the merged array
    
    printf("\nAfter sorting...\n");
    for(int i=0;i<n3;i++)         //Sorting Array
    {
        int temp;
        for(int j=i+1; j<n3 ;j++)
        {
            if(c[i]<c[j])
            {
                temp=c[i];
                c[i]=c[j];
                c[j]=temp;
            }
        }
    }   
    
    for(int i=0 ; i<n3 ; i++)       //Print the sorted Array 
    {
        printf(" %d ",c[i]);
    }
    return 0;   
}
OUTPUT:
Enter the size of first array 5
Enter the size of second array 5
Enter the sorted array elements 5 4 3 2 1
Enter the sorted array elements 9 8 7 6 5
The merged array..
1 2 3 4 5 9 8 7 6 5
After sorting...
9 8 7 6 5 5 4 3 2 1

10. Write a function in C to count the frequency of each element of an array.
Ans.
#include <stdio.h>  
   
int main() {  
    int inputArray[100], countArray[100];  
    int elementCount, i, j, count;  
   
    printf("Enter Number of Elements in Array\n");
    scanf("%d", &elementCount);
    printf("Enter %d numbers\n", elementCount);
     
    /* Read array elements */
    for(i = 0; i < elementCount; i++){
        scanf("%d", &inputArray[i]);
        countArray[i] = -1;
    }
   
    /* 
     * for any element inputArray[i], If countArray[i] = -1, 
     * that means frequency is not counted for this number yet 
     * and countArray[i] = 0 means frequency is already 
     * counted for this number.
     */ 
    for(i = 0; i < elementCount; i++) {  
        count = 1;  
        for(j = i+1; j < elementCount; j++) {  
            if(inputArray[i]==inputArray[j]) {
                countArray[j] = 0;    
                count++;
            }  
        }  
        if(countArray[i]!=0) {  
            countArray[i] = count;  
        }  
    }  
   
    /* Print count of each element */   
    for(i = 0; i<elementCount; i++) {  
        if(countArray[i] != 0) {  
            printf("Element %d : Count %d\n", inputArray[i], countArray[i]);  
        }  
    }  
   
    return 0;  
}  
Output
Enter Number of Elements in Array
6
Enter 6 numbers
1 3 4 2 3 1
Element 1 : Count 2
Element 3 : Count 2
Element 4 : Count 1
Element 2 : Count 1